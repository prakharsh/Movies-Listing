{"version":3,"sources":["App.js","AboutPage.js","Routing.js","serviceWorker.js","index.js"],"names":["App","useState","movies","setMovies","navigate","useNavigate","useEffect","a","fetch","response","json","payload","console","log","getData","style","display","flexWrap","justifyContent","padding","Array","from","map","obj","idx","class","width","margin","cursor","onClick","val","id","pathname","search","createSearchParams","object","JSON","stringify","toString","title","tagline","vote_average","AboutPage","movie","setMovie","useSearchParams","searchparam","parse","get","overview","runtime","vote_count","status","release_date","Routing","exact","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TA+CeA,MA3Cf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAEPC,EAASC,cAsBf,OArBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,oCAD/B,cACQC,EADR,gBAEwBA,EAASC,OAFjC,OAEQC,EAFR,OAGEC,QAAQC,IAAIF,GACZR,EAAUQ,GAJZ,4CADc,uBAAC,WAAD,wBAOdG,KACC,IAcF,oCACA,yBAAKC,MAAO,CAACC,QAAQ,OAAQC,SAAS,OAAQC,eAAe,SAAUC,QAAQ,SAE9EC,MAAMC,KAAKnB,GAAQoB,KAAI,SAACC,EAAIC,GAAL,OACvB,yBAAKC,MAAM,OAAOV,MAAO,CAACW,MAAO,QAASC,OAAO,OAAQC,OAAO,WAAYC,QAAS,kBAhBlEC,EAgBkFP,EAAIQ,QAfzG3B,EAAS,CACL4B,SAAS,SACTC,OAAOC,YAAmB,CACtBC,OAAOC,KAAKC,UAAU,CACdN,GAAGD,MAEZQ,aAPT,IAAqBR,IAiBjB,yBAAKL,MAAM,aACT,wBAAIA,MAAM,cAAcF,EAAIgB,OAC5B,uBAAGd,MAAM,aAAaF,EAAIiB,SAC1B,uBAAGf,MAAM,aAAT,iBAAoCF,EAAIkB,sBCPjCC,EA5BG,WAAO,IAAD,EACMzC,mBAAS,IADf,mBACb0C,EADa,KACNC,EADM,OAEAC,cAAbC,EAFa,oBAGdf,EAAGK,KAAKW,MAAMD,EAAYE,IAAI,WAAWjB,GASjD,OAREzB,qBAAU,YACH,+BAAAC,EAAA,oCAAAA,EAAA,sEACwBC,MAAM,oCAAD,OAAqCuB,IADlE,cACOtB,EADP,gBAEsBA,EAASC,OAF/B,OAEOC,EAFP,OAGCiC,EAASjC,EAAQ,IACjBC,QAAQC,IAAIF,EAAQ,IAJrB,oGAML,IAEF,yBAAKc,MAAM,OAAOV,MAAO,CAACW,MAAO,OAAQC,OAAO,SAC9C,yBAAKF,MAAM,aACT,wBAAIA,MAAM,cAAckB,EAAMJ,OAC9B,uBAAGd,MAAM,aAAakB,EAAMM,UAC5B,uBAAGxB,MAAM,aAAY,uCAArB,IAAsCkB,EAAMH,SAC5C,uBAAGf,MAAM,aAAY,uCAArB,IAAsCkB,EAAMO,QAA5C,YACA,uBAAGzB,MAAM,aAAY,4CAArB,IAA2CkB,EAAMF,cACjD,uBAAGhB,MAAM,aAAY,0CAArB,IAAyCkB,EAAMQ,YAC/C,uBAAG1B,MAAM,aAAY,sCAArB,IAAqCkB,EAAMS,QAC3C,uBAAG3B,MAAM,aAAY,4CAArB,IAA2CkB,EAAMU,iBCT1CC,EAXC,WACd,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,kBAAC,EAAD,QAC/B,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,QAAS,kBAAC,EAAD,WCGpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d962fd3f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {useNavigate,createSearchParams} from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const navigate=useNavigate() \n  useEffect(() => {\n    async function getData() {\n      const response = await fetch('http://localhost:9000/api/movies');\n      const payload = await response.json();\n      console.log(payload)\n      setMovies(payload);\n    }\n    getData();\n  }, []);\n\n  function handleabout(val){\n    navigate({\n        pathname:'/about',\n        search:createSearchParams({\n            object:JSON.stringify({\n                    id:val\n            })\n        }).toString()\n    })\n}\n\n  return (\n   <>\n   <div style={{display:'flex', flexWrap:'wrap', justifyContent:'center', padding:'20px'}}>\n   {\n    Array.from(movies).map((obj,idx)=>(\n    <div class=\"card\" style={{width: \"200px\", margin:'10px', cursor:'pointer'}} onClick={()=>handleabout(obj.id)} >\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">{obj.title}</h5>\n        <p class=\"card-text\">{obj.tagline}</p>\n        <p class=\"card-text\">Vote average: {obj.vote_average}</p>\n      </div>\n    </div>\n    ))\n   }\n  </div>\n   </>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react'\r\nimport { useSearchParams } from 'react-router-dom';\r\nconst AboutPage = () => {\r\n    const [movie, setMovie] = useState({});\r\n    const [searchparam]=useSearchParams()\r\n    const id=JSON.parse(searchparam.get('object')).id ;\r\n    useEffect(()=>{\r\n          (async function getMovie(){\r\n            const response = await fetch(`http://localhost:9000/api/movies/${id}`);\r\n            const payload =await response.json();\r\n            setMovie(payload[0]);\r\n            console.log(payload[0])\r\n          }())\r\n    },[])\r\n  return (\r\n    <div class=\"card\" style={{width: \"90vw\", margin:'10px'}} >\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">{movie.title}</h5>\r\n        <p class=\"card-text\">{movie.overview}</p>\r\n        <p class=\"card-text\"><b>Tagline:</b> {movie.tagline}</p>\r\n        <p class=\"card-text\"><b>Runtime:</b> {movie.runtime} minutes</p>\r\n        <p class=\"card-text\"><b>Vote average:</b> {movie.vote_average}</p>\r\n        <p class=\"card-text\"><b>Vote Count:</b> {movie.vote_count}</p>\r\n        <p class=\"card-text\"><b>Status:</b> {movie.status}</p>\r\n        <p class=\"card-text\"><b>Release Date:</b> {movie.release_date}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AboutPage","import React from 'react'\r\nimport App from './App'\r\nimport AboutPage from './AboutPage'\r\nimport {BrowserRouter,Routes,Route} from 'react-router-dom' ;\r\nconst Routing = () => {\r\n  return (\r\n    <BrowserRouter>\r\n    <Routes>\r\n    <Route exact path=\"/\" element={<App/>}/>\r\n    <Route exact path=\"/about\" element={<AboutPage/>}/>\r\n    </Routes>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Routing","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routing from './Routing';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}