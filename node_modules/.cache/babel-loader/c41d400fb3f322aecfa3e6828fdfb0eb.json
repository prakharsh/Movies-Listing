{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _createClass from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toArray from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"C:\\\\Users\\\\prakh\\\\Desktop\\\\Picels Assignment\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @remix-run/router v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash; // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    var keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n          key = _keyMatch[1],\n          optional = _keyMatch[2];\n\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref4 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref4.pathname,\n      _ref4$search = _ref4.search,\n      search = _ref4$search === void 0 ? \"\" : _ref4$search,\n      _ref4$hash = _ref4.hash,\n      hash = _ref4$hash === void 0 ? \"\" : _ref4$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AbortedDeferredError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref5 = _slicedToArray(_ref, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n\n\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref6 = _slicedToArray(_ref2, 2),\n            key = _ref6[0],\n            value = _ref6[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponseImpl = function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n};\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  var manifest = {}; // Routes in tree format for matching\n\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\"; // Config driven behavior flags\n\n  var future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(function (m) {\n    return m.route.lazy;\n  }) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null);\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    })); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 16;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  var blockers = new Map(state.blockers);\n                  blockers.set(blockerKey, IDLE_BLOCKER);\n                  updateState({\n                    blockers: blockers\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 16:\n              _context2.next = 18;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 18:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 15;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 15:\n              if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 18;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 18:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 24;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 34;\n              break;\n\n            case 24:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 34;\n                break;\n              }\n\n              _context3.next = 27;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 27:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 30;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 30:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              loadingNavigation = getLoadingNavigation(location, opts.submission); // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 34:\n              _context3.next = 36;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 36:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 42;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 42:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 44:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (opts === void 0) {\n                opts = {};\n              }\n\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = getSubmittingNavigation(location, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 9;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 14;\n              break;\n\n            case 9:\n              _context4.next = 11;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n            case 11:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 14;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 14:\n              if (!isRedirectResult(result)) {\n                _context4.next = 19;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 18;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 18:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 19:\n              if (!isErrorResult(result)) {\n                _context4.next = 23;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 23:\n              if (!isDeferredResult(result)) {\n                _context4.next = 25;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 25:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n              activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              });\n              pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 10;\n                break;\n              }\n\n              _updatedFetchers = markFetchRedirectsDone();\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, _updatedFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 10:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              revalidatingFetchers.forEach(function (rf) {\n                if (fetchControllers.has(rf.key)) {\n                  abortFetcher(rf.key);\n                }\n\n                if (rf.controller) {\n                  // Fetchers use an independent AbortController so that aborting a fetcher\n                  // (via deleteFetcher) does not abort the triggering navigation that\n                  // triggered the revalidation\n                  fetchControllers.set(rf.key, rf.controller);\n                }\n              }); // Proxy navigation abort through to revalidation fetchers\n\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (f) {\n                  return abortFetcher(f.key);\n                });\n              };\n\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n\n              _context5.next = 16;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 16:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 22;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 22:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 30;\n                break;\n              }\n\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n\n              _context5.next = 29;\n              return startRedirectNavigation(state, redirect.result, {\n                replace: replace\n              });\n\n            case 29:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 30:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              updatedFetchers = markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, shouldUpdateFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 36:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission,\n        error = _normalizeNavigateOpt.error;\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x21, _x22, _x23, _x24, _x25, _x26) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, originatingLoadId, actionResult, doneFetcher, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData2, loaderData, errors, _doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (!(!match.route.action && !match.route.lazy)) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = getSubmittingFetcher(submission, existingFetcher);\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context6.next = 16;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n            case 16:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 20;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 34;\n                break;\n              }\n\n              fetchControllers.delete(key);\n\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context6.next = 29;\n                break;\n              }\n\n              // A new navigation was kicked off after our action started, so that\n              // should take precedence over this redirect navigation.  We already\n              // set isRevalidationRequired so all loaders for the new route should\n              // fire unless opted out via shouldRevalidate\n              doneFetcher = getDoneFetcher(undefined);\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              fetchRedirectIds.add(key);\n              loadingFetcher = getLoadingFetcher(submission);\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                fetcherSubmission: submission\n              }));\n\n            case 34:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 37;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 37:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 39;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 39:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = getLoadingFetcher(submission, actionResult.data);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n              ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n                state.fetchers.set(staleKey, revalidatingFetcher);\n\n                if (fetchControllers.has(staleKey)) {\n                  abortFetcher(staleKey);\n                }\n\n                if (rf.controller) {\n                  fetchControllers.set(staleKey, rf.controller);\n                }\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (rf) {\n                  return abortFetcher(rf.key);\n                });\n              };\n\n              abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              _context6.next = 55;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 55:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 61;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 61:\n              abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 69;\n                break;\n              }\n\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect.result));\n\n            case 69:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n              // deleted, only put it back to idle if it hasn't been deleted\n\n              if (state.fetchers.has(key)) {\n                _doneFetcher = getDoneFetcher(actionResult.data);\n                state.fetchers.set(key, _doneFetcher);\n              }\n\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 73:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x27, _x28, _x29, _x30, _x31, _x32) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, originatingLoadId, result, _doneFetcher2, boundaryMatch, doneFetcher;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context7.next = 10;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n\n            case 10:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 18;\n                break;\n              }\n\n              _context7.next = 14;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 14:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 17:\n              result = _context7.t0;\n\n            case 18:\n              // We can delete this so long as we weren't aborted by our our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 21;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 21:\n              if (!isRedirectResult(result)) {\n                _context7.next = 33;\n                break;\n              }\n\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context7.next = 29;\n                break;\n              }\n\n              // A new navigation was kicked off after our loader started, so that\n              // should take precedence over this redirect navigation\n              _doneFetcher2 = getDoneFetcher(undefined);\n              state.fetchers.set(key, _doneFetcher2);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              fetchRedirectIds.add(key);\n              _context7.next = 32;\n              return startRedirectNavigation(state, result);\n\n            case 32:\n              return _context7.abrupt(\"return\");\n\n            case 33:\n              if (!isErrorResult(result)) {\n                _context7.next = 38;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 38:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = getDoneFetcher(result.data);\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 42:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x33, _x34, _x35) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp) {\n      var _ref7, submission, fetcherSubmission, replace, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref7 = _temp === void 0 ? {} : _temp, submission = _ref7.submission, fetcherSubmission = _ref7.fetcherSubmission, replace = _ref7.replace;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, {\n                _isRedirect: true\n              });\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n\n              if (!isBrowser) {\n                _context8.next = 10;\n                break;\n              }\n\n              isDocumentReload = false;\n\n              if (redirect.reloadDocument) {\n                // Hard reload if the response contained X-Remix-Reload-Document\n                isDocumentReload = true;\n              } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n                url = init.history.createURL(redirect.location);\n                isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n                stripBasename(url.pathname, basename) == null;\n              }\n\n              if (!isDocumentReload) {\n                _context8.next = 10;\n                break;\n              }\n\n              if (replace) {\n                routerWindow.location.replace(redirect.location);\n              } else {\n                routerWindow.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 10:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n\n              if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n                submission = getSubmissionFromNavigation(state.navigation);\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              activeSubmission = submission || fetcherSubmission;\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n                _context8.next = 20;\n                break;\n              }\n\n              _context8.next = 18;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, activeSubmission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 18:\n              _context8.next = 23;\n              break;\n\n            case 20:\n              // If we have a navigation submission, we will preserve it through the\n              // redirect navigation\n              overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n              _context8.next = 23;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: overrideNavigation,\n                // Send fetcher submissions through for shouldRevalidate\n                fetcherSubmission: fetcherSubmission,\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 23:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x36, _x37, _x38, _x39, _x40) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (f) {\n                if (f.matches && f.match && f.controller) {\n                  return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n                } else {\n                  var _error3 = {\n                    type: ResultType.error,\n                    error: getInternalRouterError(404, {\n                      pathname: f.path\n                    })\n                  };\n                  return _error3;\n                }\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n                return request.signal;\n              }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, fetchersToLoad.map(function (f) {\n                return f.controller ? f.controller.signal : null;\n              }), true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            key = _step4$value[0],\n            id = _step4$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n        nextLocation = _ref2.nextLocation,\n        historyAction = _ref2.historyAction;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    var entries = Array.from(blockerFunctions.entries());\n\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n        blockerKey = _entries[0],\n        blockerFunction = _entries[1];\n\n    var blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x41, _x42) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp2) {\n      var _ref8, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref8 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref8.requestContext;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error4 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error4),\n                statusCode: _error4.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x43, _x44) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref9, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref9 = _temp3 === void 0 ? {} : _temp3, routeId = _ref9.routeId, requestContext = _ref9.requestContext;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context11.abrupt(\"return\", data);\n\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x45, _x46, _x47, _x48, _x49) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error)) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x50, _x51, _x52, _x53, _x54) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n                isStaticRequest: true,\n                isRouteRequest: isRouteRequest,\n                requestContext: requestContext\n              });\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              _error5 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n\n              throw _error5;\n\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error5\n              };\n\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n\n              throw result.error;\n\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x55, _x56, _x57, _x58, _x59) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n                  isStaticRequest: true,\n                  isRouteRequest: isRouteRequest,\n                  requestContext: requestContext\n                });\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    var _iterator5 = _createForOfIteratorHelper(matches),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  var path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(function (m) {\n    return m.pathnameBase;\n  }), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  }; // Create a Submission on non-GET navigations\n\n\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref3) {\n        var _ref12 = _slicedToArray(_ref3, 2),\n            name = _ref12[0],\n            value = _ref12[1];\n\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      return;\n    }\n\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nfunction loadLazyRouteModule(_x60, _x61, _x62) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (route.lazy) {\n              _context16.next = 2;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 2:\n            _context16.next = 4;\n            return route.lazy();\n\n          case 4:\n            lazyRoute = _context16.sent;\n\n            if (route.lazy) {\n              _context16.next = 7;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n\n            routeUpdates = {};\n\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            } // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to mapRouteProperties\n\n\n            Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n\n            Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n              lazy: undefined\n            }));\n\n          case 13:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction callLoaderOrAction(_x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n    var resultType, result, onReject, runHandler, handler, handlerError, values, url, pathname, _url, _pathname, status, location, currentUrl, _url2, isSameBasename, queryRouteResponse, data, contentType, _result$init, _result$init2;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            if (opts === void 0) {\n              opts = {};\n            }\n\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject;\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n\n              onReject = function onReject() {\n                return reject();\n              };\n\n              request.signal.addEventListener(\"abort\", onReject);\n              return Promise.race([handler({\n                request: request,\n                params: match.params,\n                context: opts.requestContext\n              }), abortPromise]);\n            };\n\n            _context17.prev = 2;\n            handler = match.route[type];\n\n            if (!match.route.lazy) {\n              _context17.next = 32;\n              break;\n            }\n\n            if (!handler) {\n              _context17.next = 14;\n              break;\n            }\n\n            _context17.next = 8;\n            return Promise.all([// If the handler throws, don't let it immediately bubble out,\n            // since we need to let the lazy() execution finish so we know if this\n            // route has a boundary that can handle the error\n            runHandler(handler).catch(function (e) {\n              handlerError = e;\n            }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n          case 8:\n            values = _context17.sent;\n\n            if (!handlerError) {\n              _context17.next = 11;\n              break;\n            }\n\n            throw handlerError;\n\n          case 11:\n            result = values[0];\n            _context17.next = 30;\n            break;\n\n          case 14:\n            _context17.next = 16;\n            return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n          case 16:\n            handler = match.route[type];\n\n            if (!handler) {\n              _context17.next = 23;\n              break;\n            }\n\n            _context17.next = 20;\n            return runHandler(handler);\n\n          case 20:\n            result = _context17.sent;\n            _context17.next = 30;\n            break;\n\n          case 23:\n            if (!(type === \"action\")) {\n              _context17.next = 29;\n              break;\n            }\n\n            url = new URL(request.url);\n            pathname = url.pathname + url.search;\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: pathname,\n              routeId: match.route.id\n            });\n\n          case 29:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: undefined\n            });\n\n          case 30:\n            _context17.next = 41;\n            break;\n\n          case 32:\n            if (handler) {\n              _context17.next = 38;\n              break;\n            }\n\n            _url = new URL(request.url);\n            _pathname = _url.pathname + _url.search;\n            throw getInternalRouterError(404, {\n              pathname: _pathname\n            });\n\n          case 38:\n            _context17.next = 40;\n            return runHandler(handler);\n\n          case 40:\n            result = _context17.sent;\n\n          case 41:\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context17.next = 48;\n            break;\n\n          case 44:\n            _context17.prev = 44;\n            _context17.t0 = _context17[\"catch\"](2);\n            resultType = ResultType.error;\n            result = _context17.t0;\n\n          case 48:\n            _context17.prev = 48;\n\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n\n            return _context17.finish(48);\n\n          case 51:\n            if (!isResponse(result)) {\n              _context17.next = 77;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context17.next = 61;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n            if (!ABSOLUTE_URL_REGEX.test(location)) {\n              location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n            } else if (!opts.isStaticRequest) {\n              // Strip off the protocol+origin for same-origin + same-basename absolute\n              // redirects. If this is a static request, we can let it go back to the\n              // browser as-is\n              currentUrl = new URL(request.url);\n              _url2 = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n              isSameBasename = stripBasename(_url2.pathname, basename) != null;\n\n              if (_url2.origin === currentUrl.origin && isSameBasename) {\n                location = _url2.pathname + _url2.search + _url2.hash;\n              }\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!opts.isStaticRequest) {\n              _context17.next = 60;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 60:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n              reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n            });\n\n          case 61:\n            if (!opts.isRouteRequest) {\n              _context17.next = 64;\n              break;\n            }\n\n            queryRouteResponse = {\n              type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n              response: result\n            };\n            throw queryRouteResponse;\n\n          case 64:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context17.next = 71;\n              break;\n            }\n\n            _context17.next = 68;\n            return result.json();\n\n          case 68:\n            data = _context17.sent;\n            _context17.next = 74;\n            break;\n\n          case 71:\n            _context17.next = 73;\n            return result.text();\n\n          case 73:\n            data = _context17.sent;\n\n          case 74:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 76;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponseImpl(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 76:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 77:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 79;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 79:\n            if (!isDeferredData(result)) {\n              _context17.next = 81;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n            });\n\n          case 81:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 82:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee16, null, [[2, 44, 48, 51]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n          key = _step7$value[0],\n          value = _step7$value[1];\n\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n        key = _revalidatingFetchers.key,\n        match = _revalidatingFetchers.match,\n        controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator8 = _createForOfIteratorHelper(matches),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref13 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref13.pathname,\n      routeId = _ref13.routeId,\n      method = _ref13.method,\n      type = _ref13.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result: result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nfunction resolveDeferredResults(_x71, _x72, _x73, _x74, _x75, _x76) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader, signal;\n              return _regeneratorRuntime.wrap(function _loop$(_context18) {\n                while (1) {\n                  switch (_context18.prev = _context18.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n\n                      if (match) {\n                        _context18.next = 4;\n                        break;\n                      }\n\n                      return _context18.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context18.next = 11;\n                        break;\n                      }\n\n                      // Note: we do not have to touch activeDeferreds here since we race them\n                      // against the signal in resolveDeferredData and they'll get aborted\n                      // there if needed\n                      signal = signals[index];\n                      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                      _context18.next = 11;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 11:\n                    case \"end\":\n                      return _context18.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context19.next = 10;\n              break;\n            }\n\n            return _context19.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            _ret = _context19.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context19.next = 7;\n              break;\n            }\n\n            return _context19.abrupt(\"continue\", 7);\n\n          case 7:\n            index++;\n            _context19.next = 2;\n            break;\n\n          case 10:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x77, _x78, _x79) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee18$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context20.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context20.sent;\n\n            if (!aborted) {\n              _context20.next = 6;\n              break;\n            }\n\n            return _context20.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context20.next = 14;\n              break;\n            }\n\n            _context20.prev = 7;\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context20.prev = 11;\n            _context20.t0 = _context20[\"catch\"](7);\n            return _context20.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context20.t0\n            });\n\n          case 14:\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n      formAction = navigation.formAction,\n      formEncType = navigation.formEncType,\n      text = navigation.text,\n      formData = navigation.formData,\n      json = navigation.json;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","deferredKeys","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","cancel","abort","v","k","resolve","subscribe","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","_ref","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","deleteBlocker","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionData","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","doneFetcher","getDoneFetcher","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","resolveDeferredData","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","runHandler","handler","onReject","handlerError","resultType","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","deferred","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","resolveData","obj","signals","isRevalidatingLoader","unwrap","getAll","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction<Context = any> {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponseImpl {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n// We don't want the class exported since usage of it at runtime is an\n// implementation detail, but we do want to export the shape so folks can\n// build their own abstractions around instances via isRouteErrorResponse()\nexport type ErrorResponse = InstanceType<typeof ErrorResponseImpl>;\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers,\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission,\n        });\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(\n      submission,\n      existingFetcher ? existingFetcher.data : undefined\n    );\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}